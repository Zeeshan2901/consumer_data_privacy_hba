/**
 * 
 */
package consumer_data_privacy_hba;

import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger; 
import java.security.MessageDigest; 
import java.security.NoSuchAlgorithmException;
import java.util.Scanner; 


/**
 * @author Zeeshan
 *
 */
public class ConsumerDataPrivacyHBA {

	/**
	 * 
	 */
	
	String alice="";
	String bob="";
	
	public ConsumerDataPrivacyHBA() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * @param args
	 */
	
	
	 public static String getSHA(String input) 
	    { 
	  
	        try { 
	  
	            // Static getInstance method is called with hashing SHA 
	            MessageDigest md = MessageDigest.getInstance("SHA-256"); 
	  
	            // digest() method called 
	            // to calculate message digest of an input 
	            // and return array of byte 
	            byte[] messageDigest = md.digest(input.getBytes()); 
	  
	            // Convert byte array into sign-magnitude  representation 
	            BigInteger no = new BigInteger(1, messageDigest); 
	  
	            // Convert message digest into hex value 
	            String hashtext = no.toString(16); 
	  
	            while (hashtext.length() < 32) { 
	                hashtext = "0" + hashtext; 
	            } 
	  
	            return hashtext; 
	        } 
	  
	        // For specifying wrong message digest algorithms 
	        catch (NoSuchAlgorithmException e) { 
	            System.out.println("Exception thrown"
	                               + " for incorrect algorithm: " + e); 
	  
	            return null; 
	        } 
	    } 
	
	 
	 public void hashMatch() {
		 	
		 	System.out.println("\nHashCode Generated by SHA-256 for:"); 
	        
	        System.out.println("\n Alice \"" + alice + "\" : " + getSHA(alice)); 
	  	    System.out.println("\n Bob \"" + bob + "\" : " + getSHA(bob)); 
	  	    
	  	    if (alice.equals(bob))
	  	    	System.out.println("\n Alice and Bob Matches");
	  	    else
	  	    	System.out.println("\n Alice and Bob Don't Match");
	  	    	
	 }
	
	
	
	public void readFromAlice(){
		
		
    	try {
    			FileReader fr = new FileReader("input/alice.txt");
    			Scanner sc =new Scanner(fr);
    			while (sc.hasNextLine()) {
    				alice=sc.nextLine();
    			}
    			System.out.println("Data of Alice: " +alice);
    			sc.close();
    	}catch(IOException e) {
    		System.out.println("Exception in reading from Alice");
    		e.printStackTrace();
    	}
		
	}
	
	

	public void readFromBob() {
		
		try {
			FileReader fr = new FileReader("input/bob.txt");
			Scanner sc =new Scanner(fr);
			while (sc.hasNextLine()) {
				bob=sc.nextLine();
			}
			System.out.println("Data of Bob: " +bob);
			sc.close();
		}catch(IOException e) {
		System.out.println("Exception in reading from Bob");
		e.printStackTrace();
	}
		
	}

}
