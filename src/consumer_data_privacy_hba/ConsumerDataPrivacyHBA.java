package consumer_data_privacy_hba;

import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger; 
import java.security.MessageDigest; 
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.SortedMap;
import java.util.TreeMap; 


/**
 * @author Zeeshan
 *
 */
public class ConsumerDataPrivacyHBA {
	
	Map <String, SortedMap <String,String>> locGene;
	Map <String, SortedMap <String,String>> locRsid;
	String alice, bob;
	
	public ConsumerDataPrivacyHBA() {
		alice="";
		bob="";
		locGene = new HashMap<String, SortedMap <String,String>>();
		locRsid = new HashMap<String, SortedMap <String,String>>();
	}
	
	
	public static String getSHA(String input){ 
        try { 
  
            // Static getInstance method is called with hashing SHA 
            MessageDigest md = MessageDigest.getInstance("SHA-256"); 
  
            // digest() method called 
            // to calculate message digest of an input 
            // and return array of byte 
            byte[] messageDigest = md.digest(input.getBytes()); 
  
            // Convert byte array into sign-magnitude  representation 
            BigInteger no = new BigInteger(1, messageDigest); 
  
            // Convert message digest into hex value 
            String hashtext = no.toString(16); 
  
            while (hashtext.length() < 32) { 
                hashtext = "0" + hashtext; 
            } 
  
            return hashtext; 
        } 
  
        // For specifying wrong message digest algorithms 
        catch (NoSuchAlgorithmException e) { 
            System.out.println("Exception thrown"
                               + " for incorrect algorithm: " + e); 
  
            return null; 
        } 
    } 
	
	 
	 /*public void hashMatch() {
	 	
	 	//System.out.println("\nHashCode Generated by SHA-256 for:"); 
        //System.out.println("\n Alice: " + alice+ getSHA(alice)); 
  	    //System.out.println("\n Bob  : " + bob + getSHA(bob)); 
  	    
  	    if (alice.equals(bob))
  	    	System.out.println("\n Alice and Bob Matches");
  	    else
  	    	System.out.println("\n Alice and Bob Don't Match");    	
	 }
	
	
	
	public void readFromAlice(){
    	try {
    			FileReader fr = new FileReader("input/alice.txt");
    			Scanner sc =new Scanner(fr);
    			while (sc.hasNextLine()) {
    				alice=sc.nextLine();
    			}
    			fr.close();
    			sc.close();
    	}catch(IOException e) {
    		System.out.println("Exception in reading from Alice");
    		e.printStackTrace();
    	}
		
	}
	
	

	public void readFromBob() {
		
		try {
			FileReader fr = new FileReader("input/bob.txt");
			Scanner sc =new Scanner(fr);
			while (sc.hasNextLine()) {
				bob=sc.nextLine();
			}
			fr.close();
			sc.close();
		}catch(IOException e) {
		System.out.println("Exception in reading from Bob");
		e.printStackTrace();
	}
		
	}*/

	
	public void readFile(String location) {
				
		String line ="";
		try {
			FileReader fr = new FileReader(location);
			Scanner sc =new Scanner(fr);
			while (sc.hasNextLine()) {
				line=sc.nextLine();
				String[] row=line.split("\t");
				
				for(int i=0;i<row.length;i++)
					System.out.println("\t"+i+" " +row[i]);

				if (isHomozygous(row[3])) {
					if(locGene.containsKey(row[1]) && locRsid.containsKey(row[1])) {
						locGene.get(row[1]).put(row[2],row[3]);
						locRsid.get(row[1]).put(row[0],row[3]);
					}else {
						SortedMap <String,String> sm=new TreeMap<String,String>();
						sm.put(row[2],row[3]);
						locGene.put(row[1],sm);	
						SortedMap <String,String> sm1=new TreeMap<String,String>();
						sm1.put(row[2],row[0]);
						locRsid.put(row[1],sm1);
					}
				}
			}
			sc.close();
			

	}catch(IOException e) {
		System.out.println("Exception in reading at "+location);
		e.printStackTrace();
	}	
	}
	
	public boolean isHomozygous(String allele) {
		return (allele.charAt(0)==allele.charAt(1));
	}
	
	
}




























