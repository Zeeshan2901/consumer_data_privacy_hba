package consumer_data_privacy_hba;

import java.net.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.IntStream;
import java.io.*;
import java.math.BigInteger;

public class HBA_Server_V2 {
	//Declaring Communication Objects
	private Socket	socket				= null;
	private ServerSocket server			= null;
	private DataInputStream serverIn	= null;
	private DataOutputStream serverOut	= null;
	private int port;
	
	//Location of the input File
	private String location;

	//Overlapping & threshold variable
	int overlap;
	int threshold ;
	
	// NONCE fields
	long my_nonce, party_nonce, nonce;
	String hashOfMyNonce, hashOfPartyNonce;

	//CHROMOSOME Count Constant
	final static int CHROMOSOME_COUNT = 22;

	//Necessary Data Structures
	ArrayList<GenotypedData>[]	genes;			//holds the data files
	ArrayList<FrameData>[]		frames;			//holds frame data
	ArrayList<FrameData>[]		exclusionList;	//holds excluded frame data
	ArrayList<GenotypedData>[]	readRejects;	//holds rejected input snips
	
	//2D centiMogran Array holding the starting positions of each centiMorgan
	int [][] cM;
	
	
	
	
	//Constructor to initialize the variables
	public HBA_Server_V2(/*String inp*/) {
		port = 5000;
		//location="test_files/case3/2.txt";
		location = "input/dad_all.txt";
		//location= inp;
		overlap=5;
		threshold = 50;
		genes			= new ArrayList[CHROMOSOME_COUNT+1];
		frames			= new ArrayList[CHROMOSOME_COUNT+1];
		exclusionList	= new ArrayList[CHROMOSOME_COUNT+1];
		readRejects		= new ArrayList[CHROMOSOME_COUNT+1];
		
		for (int i = 1; i <= CHROMOSOME_COUNT; i++) {
			genes[i]		= new ArrayList<GenotypedData>();
			frames[i]		= new ArrayList<FrameData>();
			exclusionList[i]= new ArrayList<FrameData>();
			readRejects[i]	= new ArrayList<GenotypedData>();
		}
		
		cM = new int[23][];
		cM[0] = null;
		cM[1] = new int [] {0,1131729,1418789,1705371,2003293,2296659,2601009,2917698,3229048,3551709,3995287,4219407,4577155,4971506,5445556,5900219,6402122,6894620,7433296,8080807,8648791,9257394,10047394,10751429,11207533,11607090,11960414,12270440,12660212,13106243,13893470,14330882,14713485,15029121,15350476,15747027,16134805,17175686,17727393,18064920,18330151,18583340,18876190,19217154,19661936,20369478,21160158,22040202,22534641,23042351,23798312,24752034,25727438,26538840,27510618,29510455,30197400,30631020,31104690,31528551,32052841,33639081,34397619,35155451,35914308,37194205,37786970,38233936,38644628,39107910,39695950,40406195,41094320,41947062,43258744,44369256,46294316,47635424,48732390,52129241,53458182,54161671,54715326,55330287,56013952,56836145,57454864,57975510,58484464,58993673,59482948,60181582,61331609,61852650,62379025,63132613,63936883,64583312,65386545,66598604,67390405,68035216,68799489,70147602,71618183,74181618,75614252,76634620,77596024,79028230,80153127,81216208,81839074,82509358,83629453,84847730,85841396,86942225,87903873,89210240,90410171,91098871,91881255,93568921,94566832,95478522,96966034,98556749,99558841,100658578,101704933,102567534,104046331,105228300,106274609,107313100,108286632,109585272,110310025,110840416,111356981,112075482,112852009,113837041,115089811,116036725,116754443,117427932,118251850,120047567,142535439,145931852,147550218,150392540,152055641,153253737,154291595,155629930,156664702,157295167,157970016,158701449,159254764,159644846,160017816,160358405,160740316,161277951,162148669,162815806,163252941,163622479,163977468,164429971,165158690,166118944,166976293,167438995,167877085,168417103,169204268,170053426,170969175,172231690,173662207,175375234,176308444,177490290,178982881,180768874,181535076,182217140,182878842,183877775,185191199,186898850,188113894,189411568,192135314,193045347,193963224,195237196,197468341,199433386,200551161,201020561,201407532,201846684,202294201,202869729,203390302,203939894,204586184,205349105,206080524,206848695,207773168,208484215,208993706,209520556,210204376,211388281,212755471,213506506,214133247,214901926,215719741,216255227,216790026,217444206,218234971,219464310,220974017,222195824,223467482,225503526,227178458,228514802,229346329,229987450,230678653,231416800,232114546,232720976,233303102,233774505,234200962,234624209,235058851,235511263,235967285,236327433,236623965,236926621,237232462,237541043,237848233,238267165,238767666,239283795,239679127,240051024,240392100,240672731,240940511,241279885,241719893,242105339,242424755,242726051,243163601,243890573,244272890,244539792,244797058,245060483,245315411,245618870,245945077,246334538,246804984,247474342};
		cM[2] = new int [] {0,885649,1604531,2251840,2895684,3378023,3791034,4111106,4463078,4808381,5165481,5551324,6214266,6754579,7179512,7516661,7828097,8079192,8327228,8596276,8881935,9237862,9659377,10096259,10438294,10806616,11182553,11559220,11936342,12309121,12749981,13262907,14624157,15390177,15818248,16177073,16538769,16911616,17565683,19006401,19787307,20366223,20873088,21466903,22352577,23232944,24291959,25688222,27040457,28690468,29363613,29971579,30611548,31096545,31630684,33502817,34006226,34501296,35565003,36544228,37104268,37716459,38538546,39782960,41294290,42258971,42900580,43485775,44267891,45094757,45742000,46337558,47011834,47895766,48511511,49296457,51257208,53040565,54084080,55547352,57242533,58653398,59731292,60581454,61985304,64612323,65496522,66195776,66975422,67768062,68582802,69418517,70728931,71339829,71932179,72543297,73404873,74234220,74915789,75588211,76289335,77118074,78028413,78863442,79551229,80216176,80962062,82791350,84900441,85991784,87039238,87974847,96146318,99908123,101322100,102414301,103477532,105507497,106717656,107584407,108485699,109497573,111361823,112448924,113775573,114776684,115524735,116816717,118527210,120186581,121009789,121714972,122294050,122994475,124030604,125277833,126410220,127297908,128320210,129195707,130010808,130769319,131511470,132282488,132998211,133686753,134379034,135078478,136250593,137956378,139124835,140206286,141766689,143241136,144278811,145346586,147854980,149193999,150160586,151123954,152183222,153657968,154875511,155640072,156379016,157473088,158801976,160177699,162122844,163660795,165167669,167158511,168750601,169345112,169767667,170136858,170577102,171240550,172522537,173556649,174216831,174996227,175793719,176710332,177451946,178333691,179346760,180850013,182487666,184053853,185382937,188138555,191038343,192012980,192643158,193444416,195737592,196970790,198364748,199655139,201024685,202274887,204162020,205459288,206227408,206898320,207538488,208219895,209096345,210780555,212328483,213064604,213806283,215346380,216149477,216627184,217023025,217423830,217813736,218220180,218666851,219152889,219725318,220371087,220966202,221430793,221919869,222447047,223006996,223595253,224218922,225337717,226455822,227511659,228135471,228660837,229213157,229942122,230628976,231202525,231806241,232522175,233234075,233708441,234172834,234636072,235082463,235427414,235695113,236009257,236361835,236738570,237508161,238437971,238944138,239325202,239639545,239920463,240180403,240408766,240714221,241098626,241582151,242254697};
		cM[3] = new int [] {};
		cM[4] = new int [] {0,1365417,2224331,2907731,3519917,4061491,4531684,4950579,5325130,5651445,5946064,6238460,6509412,6737148,6961255,7160886,7377187,7597121,7826151,8042752,8337625,8656628,9201205,10698905,11573650,12524781,13590806,14347794,14910255,15417976,15971689,16527546,17005305,17477529,18097789,19397263,20637199,21818421,23395640,24216707,24779305,25211258,25624970,26015868,26407806,26840684,27374085,28074237,28947214,30028836,31166591,32151012,33100727,34411956,36566938,37361209,37963425,38395342,38969859,39755622,40278076,40717259,41172626,41703288,42267920,42993348,44710520,47521639,53268991,54069744,55094031,55694315,56323253,56995602,57700971,58607777,59894480,61649195,62793003,63847114,65745459,67950248,69503304,70483042,71370212,72417093,73879235,74916768,75808230,76759338,77725242,78786025,80167127,81437148,82549978,83320213,83917700,84510755,85226383,86187128,87880880,88844395,89465354,90042321,90751109,92002647,94667361,96191863,97471415,99039230,100260545,101240458,102432973,103918623,105524536,106945696,108230923,109130957,110117981,110993626,111797204,112525769,113597711,114509498,115513240,117264511,118926902,120670271,122212234,123533722,125594362,127371296,129003917,130368541,131516724,132687089,134794724,136077138,136854593,137702094,138827182,139629605,140292696,140884018,141485134,142049778,142720955,144420519,146319976,147256192,148137815,149237913,151741221,153032818,153561883,154083094,154561623,155226978,156124329,156977628,157884783,159210499,160652495,161863482,163017936,163896089,164527863,165047454,165670025,166666919,167945569,168958655,169733261,170449316,171341145,172498767,173782375,174929901,175787385,176471215,177102970,177757855,178431466,179303180,180020712,180547140,181069654,181550151,181979534,182369959,182762040,183106651,183417874,183704460,184012102,184325297,184626768,184913873,185197739,185501321,185784582,186064760,186336934,186559860,186801485,187026873,187286722,187563379,187939738,188384723,188771049,189166355,189619878,190119185,190703015};
		cM[5] = new int [] {0,521242,884503,1213598,1532746,1838201,2130925,2396771,2645796,2982369,3306358,3700168,4079401,4378812,4660557,4937838,5213054,5510802,5845406,6238685,6689714,7177161,7721196,8304532,8856959,9310451,9640138,9987060,10334309,10709213,11106114,11596876,12453985,13430575,14237900,14946949,15586023,16153807,16739667,17265766,17942462,18632789,20095302,22133608,23277431,24263629,25143346,26077315,27551240,29868650,30683501,31188957,31581353,31840650,32236800,32710452,33305080,33918270,34514266,35351978,36681820,37547271,38091521,38492335,38837186,39505889,41799864,44224782,51856637,52954750,53865607,54930901,56000299,56757081,57710645,58844084,61008915,62954750,65372904,66228144,67022628,67814243,69053788,71374337,72254199,72971128,73650027,74236028,74768822,75336204,75960642,76581920,77217799,77941246,78660689,79444683,80111137,80782691,81382834,81992190,82605575,83200886,84695552,86997973,88448153,89433872,90531499,92219683,93888627,94829144,95657677,96681130,98181421,100258980,101763504,103033966,104684997,106277306,107341817,108583080,109820902,110793973,111719051,113161314,114513018,115157089,115704856,116236761,116844960,118269928,120601057,121782778,123330196,123942140,124514980,125199539,126187854,127206524,128376737,131687741,132813969,133783066,134642082,135496016,136511940,139947076,140552411,141134568,141575527,141971014,142320038,143042772,145497338,146179478,146860108,147758918,148571890,149107223,149570997,149962815,150363310,150844107,151485350,152673741,154328337,155605588,157307444,158571195,159205023,160080257,161565992,162555138,163363528,164062348,164681534,165275163,165866621,166435331,166977643,167463367,167954650,168412095,168904334,169259125,169619246,169970412,170352241,170750227,171329364,171761338,172099698,172403173,172691937,172986850,173285966,173564348,173835747,174090570,174382368,174738369,175126312,175679521,176315643,176987954,177502426,178051617,178590330,179118100,179665990,180214191};
		cM[6] = new int [] {0,497198,772527,1051246,1344244,1639428,1947767,2271652,2604477,2990739,3364512,3710727,4063118,4434822,4799647,5178848,5596679,5988849,6422238,6813951,7212108,7693930,8160321,8632621,9111713,9579595,10055933,10565347,11093221,11599730,12060793,12501106,13020686,13745764,14387185,14853798,15417927,16070094,16629320,17047673,17449641,17965640,19047127,20058208,20849330,21479172,21980234,22462120,23050295,23776350,24343984,24908781,25545151,26853772,32046582,33086799,34083645,35327354,36309713,37096927,37971034,38930445,39571689,40113036,40616866,41080232,41562910,42023773,42542824,43021770,43426913,43806609,44244237,44690029,45157117,45748749,46673367,49322624,51725663,52506894,53096462,53770908,54865556,56099372,58582571,65640590,67272688,69026649,70565109,71703733,72768071,73849221,75395253,77691297,79324843,81904370,83514708,87199678,88797657,89583058,90192352,90741908,91268317,91901841,92787993,94291929,96121160,97800340,99094225,100523612,101723171,103128512,104828689,105628984,106245370,106796786,107323122,107880463,108810254,110030286,111232401,112201419,113409277,115310441,117549097,120349067,122526563,123664957,124227440,124711380,125218597,125844244,127064240,129138932,130128038,131111120,132158313,133137959,133885174,134513842,135226417,135996460,136695557,137273652,137771273,138134594,138553880,139002851,139541447,140292299,142715122,143893755,144940105,147308645,148071785,148560726,148964317,149465545,150093441,150867169,151337926,151714118,152099922,152663097,153465320,154267616,154777774,155291049,155887558,156711600,157691475,158752486,159319556,159824562,160541402,161462377,162089813,162597638,163123113,163665830,164405379,165135938,165645152,166090639,166423885,166735066,167056695,167336262,167622980,168042096,168282333,168670016,169145405,169748529,170637848};
		cM[7] = new int [] {0,1052871,1836669,2535743,3181526,3755014,4262680,4746869,5279433,5764469,6357283,6963887,7503848,7885551,8253185,8583447,8913530,9318354,9845383,10558866,11361217,12094441,12724651,13304469,13875284,14445524,15027608,15641042,16389738,17256330,18114020,18965305,19666320,20284145,20842793,21360716,21876649,22503028,23337348,24513239,25353764,26184343,27573339,28287523,28740576,29184489,29616291,30062681,30540016,31115676,31800564,32846106,34015136,35037047,35890874,36598663,37154912,37706818,38311952,39140962,40503344,41300307,41885617,42594089,43607165,44326413,44952773,45719334,46662517,47780277,48929073,49896852,50703237,51465339,52475266,54298496,55839452,57809115,65107567,67162878,68434604,69397942,70195338,71129265,72213023,73371731,74599763,75695807,76705382,77606383,78446049,79202374,79887335,80678608,81424649,82023812,82677218,83421291,84677176,87373288,88882208,90038336,91262323,92392991,93374414,94088853,95374878,96643606,97440336,98216851,99595464,101576484,103028967,104315008,105223995,105710635,106237475,106829223,107604166,108676756,109838087,111190540,112834635,114455898,115751505,117140127,120379835,121624122,123007456,124137201,126151733,128065341,129260570,129938497,130447001,130830838,131167336,131491757,131951706,132438268,134111235,135196912,136267709,137008997,137485811,137928906,138333345,138761308,139231557,139756591,140609920,141423552,142204826,142971118,143805032,144953794,146024024,146775748,147388675,147950283,148547354,149142273,149686208,150142068,150575853,150982712,151371030,151752606,152121592,152461820,152787644,153099173,153413919,153739034,154028005,154370743,154575637,154805750,155044834,155284076,155553325,155830661,156113101,156499822,157020063,157545147,158134409,158799214};
		cM[8] = new int [] {0,949443,1395789,1823152,2213596,2578964,3080697,3527346,3920054,4239459,4535153,4891325,5386049,5823708,6127105,6461603,6858606,7217774,7723357,8579951,9397475,10599129,11484123,11978241,12334517,12663708,13029759,13480070,14278313,15677147,16340805,16919490,17415247,17897133,18358290,18808042,19312063,19835528,20396898,21017421,21498212,21945441,22360938,22751272,23208590,23743154,25119098,25898316,26540927,27280402,27870407,28324894,28762848,29213271,29816738,30563883,32053761,33703978,35957520,37376101,38603784,39874002,40917721,42035283,48594590,51431439,52679075,53335433,53832412,54699442,56263378,57252953,58121799,58828466,59659618,60749822,61507878,62240152,63411480,66269155,68138509,69025865,69709946,70371797,71172300,71821791,72350554,72755236,73179241,73607548,74156396,75264444,77367515,80651441,81636273,82393004,83542790,86170498,88241167,90376027,92428822,93921486,95013809,95950099,96815979,97629906,98354674,99222276,100770343,101500922,102036414,102473802,102857719,103306404,103912608,105486895,107074324,108114392,109522590,112136613,115622040,117177594,118351927,119485032,120457376,121653013,122624485,123144735,123563073,123963220,124323701,124751494,125308287,125872948,126342129,126916510,127667757,128085841,128416327,128682746,128982660,129358881,130195912,131325410,132186725,133025722,133532377,134003374,134468385,134952659,135453491,136088680,136743305,137472259,138101854,138548869,138960284,139330379,139644650,139956777,140274940,140647428,141073508,141566293,142129898,142684641,143271886,143959412,144789319,145889831};
		cM[9] = new int [] {0,679119,1011757,1329113,1626498,1914662,2198752,2450986,2751271,3122294,3629243,4018146,4310014,4592575,4828043,5152294,6184695,7145121,7556648,7872716,8231376,8560928,8858271,9152025,9501227,10018303,10579713,11467227,12302520,12992889,13563788,14048501,14374538,14739382,15046185,15662787,16309274,16822855,17264074,17808051,18507278,19174846,19695946,20200842,20948940,21932171,22656267,23421467,24444751,25183531,25776880,26759215,27200992,27471830,27790950,28131630,29765984,31370262,32536041,33535809,34838738,36758675,37654544,38261833,38756605,65467970,67950309,71093529,72544066,74289111,76254975,77362238,77907269,78357628,78775647,79187197,79641758,80413141,81248022,81796630,82383111,83599064,84114879,84682241,85616312,86620790,87654393,88266903,88824701,89296220,89767115,90240197,90704948,91293965,91886688,92443513,92859086,93424704,94231460,95619450,97229027,98045073,98966019,101000377,101768847,103012514,104054109,104844798,106043777,107287692,108585242,109390054,109890195,110320754,110727926,111108512,112121126,112716312,113480551,114951411,115718120,116233109,116661352,117062859,117651976,118401027,119122342,119995273,120867221,121589702,122157815,122717951,123612784,124837698,125632033,126370330,127391129,128676662,129554595,130396066,131192661,131728265,132188827,132595196,132939439,133298662,133772069,134264394,135162185,135661457,136083260,136471218,136810326,137013789,137170828,137334620,137473440,137601285,137741752,137895910,138077528,138297873,138542282,138837514,139162452,139543347,140016423,140759262};
		cM[10] = new int [] {0,520164,930647,1444301,2172509,2647191,2900641,3134569,3329584,3511415,3699620,3866515,4070946,4437570,4833942,5322920,5698389,6010810,6322385,6714175,7219686,7821356,8212168,8534367,8916491,9546959,10660649,11373578,11965539,12344501,12695316,13027926,13344971,13665057,14010029,14378187,14755418,15274854,15840479,16300103,16715657,17190735,17756234,18738751,20029063,21414008,22894008,23980181,24765033,25614523,26458798,27131556,28448861,29116492,29512187,29889690,30288234,30727148,31229597,32603934,34034408,35329620,36546383,38205179,44663796,46946606,48612188,49993510,51454820,53550184,54250098,54943845,55879748,57075075,58920317,60215373,61216338,61996076,63055918,64471946,66033256,67477650,68065729,68698203,70384363,71025342,71503806,71891595,72259436,72592455,72929147,73346692,73891091,76721425,77734071,78424229,79197957,80165311,80856971,81511274,82136206,83000139,83852049,84824632,85796071,86974130,88324032,89761160,90734897,91613355,92501279,94018517,94880721,95505379,96754368,98057438,98798134,99435301,100163501,101230663,102421654,103558690,105836739,107861230,108628352,109377258,110743251,111699025,112717808,113980030,114516759,114956519,115425647,116002076,117022101,117764757,118308407,118977576,119421936,119742511,120117380,120748750,121652983,122206595,122679129,123091714,123494691,124027671,124698322,125429381,126000347,126423932,126824728,127218733,127576266,127991994,128442221,128958401,129514771,129894118,130167448,130409121,130636202,130845423,131060556,131299022,131554035,131842371,132202300,132567452,132966931,133372847,133838563,134383633,135100651};
		cM[11] = new int [] {0,545597,847884,1155534,1464850,1784330,2115695,2457886,2785499,3111559,3478500,4222588,4883134,5267713,5680542,6121348,6665826,7309640,7814543,8337313,8965855,10561669,11101638,11511616,11876535,12259877,12745803,13512857,14983396,15879399,16735746,17604270,18330733,18988546,19317992,19577656,19837292,20100645,20384153,20692981,21159361,21691750,22221784,22798651,23458021,24109729,24808111,25593356,26837845,27882665,29478284,31168291,32826991,33520860,34045751,34489035,34952158,35465944,36019025,36560795,37202049,38964122,40238475,41122202,42507517,43957859,44408391,44891092,45519093,54778288,59832332,60648226,61347431,62238220,63533549,64649222,65721105,67203755,68720542,69432744,70040235,70578935,71165931,71910297,73473868,74967162,75908526,76727867,78014741,78734915,79305653,79794804,80501103,81810381,83282313,84627766,86598161,87538296,88656997,91543514,93178691,94538776,95137306,95735660,96437657,97257441,98232274,99470985,100460617,101113666,102743766,105009995,106540181,108299803,109778498,110595498,111297517,112134189,113138858,113658329,114164752,114647267,115513058,116131291,116600259,117022276,117722997,118630255,119513974,120158018,120701167,121221174,121792078,122325268,122732116,123068073,123462356,123897035,124488476,125375135,126043286,126442635,126773834,127216216,127994597,128686263,129209702,129667165,130094199,130476210,130779068,131038023,131287800,131555855,131832204,132215407,132711963,132975855,133235258,133531914,133986967,134785001};
		cM[12] = new int [] {0,738274,1143228,1531028,1908745,2268481,2633770,3016190,3342282,3608520,3858791,4096508,4326174,4607989,4950870,5399348,5847456,6274385,6663375,7120064,7529887,7921306,8286338,8676796,9125868,9833524,11211253,11731903,12069204,12336947,12582530,12842372,13123975,13500613,14157555,15172814,15741750,16317576,17035687,18757617,19486375,20048962,20577281,21148915,21757132,22497276,23266914,24037281,24685956,25264321,25787765,26368914,27172070,28511121,29169640,29718489,30428459,31575318,32690310,40311826,42046954,43402625,45063076,46264966,47371963,48481798,49622727,51571931,52191096,52646739,53138101,53962913,54562277,55208895,55874755,56917661,58608888,60124937,62199396,63015551,63963039,65322181,66318571,66952182,67474135,67951266,68619808,69504996,70843030,72013432,75308399,76212336,76877639,77568328,78405231,79031906,79602386,80428523,82303399,83490823,85377382,88749780,90141789,91413338,92478421,93229674,94068217,94669656,95082185,95447886,95905364,97445758,98081585,98652245,99376823,100959344,101765941,102479923,103396809,104019816,104654075,105563038,106290323,106692371,107277171,108200700,109000201,109666999,110541122,112923227,113723576,114306809,114843746,115319003,115753555,116264836,116874746,117274646,117633506,118001840,118428175,118904886,119432000,120094699,121055325,122815885,124714861,125091861,125389776,125714595,126019985,126435197,126899166,127267149,127553481,127835018,128085492,128303793,128505643,128681695,128852623,129042301,129234104,129420901,129601060,129793545,129989510,130208101,130427532,130645734,130895285,131145890,131430109,131805803,132244980,132807031};
		cM[13] = new int [] {0,20841237,21454177,21907959,22290850,22603804,22948326,23302418,23657136,24014353,24479820,25025304,25471214,25881334,26269482,26652474,27067452,27446580,27823366,28195049,28583323,28957523,29331275,30098406,30579612,30914706,31240058,31569451,31969511,32450060,32936620,33546345,34429313,35277786,36040853,36716096,37337472,37925407,38490544,39080694,39705116,40299342,40971099,41659417,42976848,43543437,44029204,44508517,45676009,46449215,46957414,47381103,47984080,50214138,51326465,53446704,58258700,60054028,61481775,63808053,65867523,67834876,69896427,70935167,71838576,72481521,72987374,73450552,74099531,74673670,75141796,75639134,76346505,77655897,78753120,79746234,80704632,81879947,83490900,85654760,87578447,89102137,90302573,91455151,92502224,93602830,94201006,94682537,95120957,95601145,96189743,97554650,98250333,98704719,99154726,99795583,100805562,101218632,101533579,101929197,102499907,103751583,104461250,104907330,105232881,105524959,105785211,106067976,106390322,106786512,107206812,107635486,107947060,108212612,108504936,108855176,109386588,109851369,110163233,110422196,110637198,110860033,111122247,111448129,111806002,112139324,112504123,112765189,113073039,113435475,113871122,114437008};
		cM[14] = new int [] {0,20771918,20992484,21180482,21347224,21496317,21638941,21778926,21932301,22136122,22423537,23200212,23561193,23847889,24109878,24440429,24863277,25853953,26267111,26691657,27166114,27895384,29708516,30410808,30963020,31627881,32172776,32560025,32872906,33123890,33338639,33570017,33809067,34050963,34322005,34699441,35480684,36696317,37578536,38217251,40037233,42542741,43999496,45382489,47902441,49815856,50826352,51670744,52516395,53701316,54471694,55150075,55969390,56532891,57091798,57528493,58186254,59036151,61614206,62327538,63549196,64954771,65878993,68229651,69337800,70166761,70764242,71331725,72490111,73079094,73786243,75067089,75931346,76553058,76991058,77400073,78228485,79175815,79902121,81039319,82259418,83474776,85253679,86347038,87145678,88047120,89217004,89638838,90014929,90310714,90579950,91013222,91568452,92199247,92716881,93303584,94370284,94738297,95069783,95367449,95626956,95967821,96328855,96801791,97297666,97687027,97983750,98324799,98799701,99166071,99494977,99714433,100115187,100709309,101044968,101321726,101539762,101797250,102068170,102493821,104110122,104719259,105301594,105904649,106520580,107165737};
		cM[15] = new int [] {0,23076235,23333893,23636813,24021294,25147485,25666165,26023552,26303580,26505157,26832450,27112413,27367821,27616533,27839325,28074589,28359413,28679826,29032324,29526771,30118213,31110099,31772479,32471930,32913660,33206397,33474468,33679270,33931139,34294574,34726427,35189761,35737093,36251454,36703378,37109883,37638813,38247845,38793842,39307703,39788460,40399735,41315903,44957898,46052906,46808803,47531965,48332976,49136881,52217653,53339497,54109196,55754053,57420445,57933637,58298682,58616761,58994260,59461471,60446548,61013134,61563610,62107325,62784061,63552174,65335483,66231831,66585871,67017564,67495366,68111822,69046944,69524498,70001013,70494733,71005051,71534707,72187776,74809074,76803961,78262947,79007678,79512540,80076122,81083984,81633111,82044531,82620272,84858929,86639220,87252596,87676688,88190962,88715066,89261367,89913257,90772588,91447566,91894188,92212306,92519886,92806127,93067061,93305258,93581449,93864354,94122099,94357300,94616941,94906619,95190892,95482802,95793720,96106541,96376606,96617648,96902448,97186607,97580025,97889815,98163288,98416771,98685694,98942326,99403045,100003677,100575520,100953114,101260274,101536416,101783068,102008206,102214932};
		cM[16] = new int [] {0,373301,622325,887933,1170781,1476794,1806427,2276738,2923846,3538003,4196538,5152154,5544720,5786677,5973292,6175233,6364305,6545472,6897235,7492455,7868319,8144289,8443102,8801434,9331524,9792143,10224254,10640402,11085826,11559667,12237446,12637705,12911242,13210708,13589796,15470387,16084204,16613754,17119242,17761848,18313370,18772892,19165170,19915322,20609331,21245101,22100233,22889427,23486634,24054494,24556817,25087052,25629652,26130560,26536173,26903451,27347998,27863547,29164218,30859496,48602368,49425286,50031285,50564156,51016467,51470633,52096136,52632290,53370865,53873390,54212023,54473738,54785291,55231868,55759632,56407327,56894919,57447834,58094795,58818456,59472109,60140179,60891009,61865866,63572408,64623371,65646125,66822466,69758268,71746782,72937529,73562242,74109546,74768054,75929962,77094301,77776633,78412110,78743774,78892764,79032849,79152952,79255867,79406458,79643599,80135732,80828202,81131765,81359007,81653041,81950429,82251707,82595857,83027035,83365320,83691818,83959166,84211378,84379618,84549106,84739561,84939646,85160405,85525121,85762731,86008313,86257882,86488122,86740712,87044388,87423070,87989082,88766926,89480269};
		cM[17] = new int [] {0,284012,478595,686392,916316,1176029,1486143,1850168,2274704,2685265,3062033,3460023,3867929,4324974,4839827,5308456,5696866,6014443,6347784,6646189,6958485,7368430,8097023,8654703,8971561,9218992,9418213,9602458,9790894,9969894,10165262,10377378,10737792,11279654,11613455,11947480,12380497,12834464,13271238,13617952,13833272,14021980,14203882,14380816,14556832,14732079,14928765,15202622,16119222,17100026,18121503,19661568,21407318,26194776,28207733,30157508,30834096,31329668,31734523,32058844,32394188,32788062,33219925,33896709,34840815,35608035,36214135,36887286,37919351,39187789,40244940,41808604,43483020,45540189,47110696,47806445,48209277,48727617,49353461,50279178,51354855,52609446,53431198,54010648,54433211,54805413,55146625,55534817,56038761,56502053,58380096,59415760,60347538,61297177,62510497,63697092,64471272,65079473,65638854,66149321,66806983,67397668,67942681,68570944,69240423,69969604,70416445,70745875,71030100,71273319,71501258,71734681,72005578,72377328,72984918,73869847,74363363,74709424,75041085,75372126,75691668,76003685,76279899,76536804,76744344,76919207,77101703,77300581,77515605,77715534,77927758,78159513,78432659,78734969,79099358,79504519,80026978,80992533};
		cM[18] = new int [] {0,412629,672204,997498,1505590,1973801,2276661,2484145,2708109,2997137,3265553,3520400,3780220,4031345,4303950,4643308,4929781,5168470,5439127,5709567,5981381,6253705,6505071,6690728,6891341,7078228,7259265,7456078,7685120,7908397,8129417,8368250,8630606,8896127,9305858,9670205,9902230,10119337,10372003,10677760,11045423,11407965,11783442,12390945,13142116,13653278,14178911,14687173,19971920,21067293,21974657,22691763,23307374,23869240,24438625,25169504,26323318,27389009,28152823,29155949,30464282,31671809,33323857,35094248,35980164,37755556,38900332,39967638,42235781,43091569,43886519,44792636,45575117,46148109,46669830,47363170,48127921,49022271,49824896,51008847,52819046,53848761,54739788,55696726,56486900,56876927,57210246,57493175,57871579,58493436,59156627,59944788,60455449,60910659,61368042,61826352,62536045,63049116,63628608,64890340,65445009,65892353,66392248,66973313,67647628,68603157,69331695,69894894,70359729,70794610,71109430,71379596,71636616,71891934,72145466,72401064,72712777,73061663,73469398,73870826,74183848,74455203,74715180,75001280,75311880,75654959,76060256,76492229,76950302,77441524};
		cM[19] = new int [] {0,1398143,1648775,1890208,2122195,2344415,2559414,2770398,2971737,3140417,3328178,3512450,3736846,3992241,4392287,4759202,5037621,5386109,5869422,6421007,6689370,6929088,7218258,7582097,8087393,8458960,8737231,8979295,9291409,9667838,10118295,10783479,11720524,12900235,13506088,13937236,14346265,14862266,15530309,16145842,16678653,17237209,17621162,17895440,18191326,18612351,19956496,21962698,23863494,29705013,30493153,30895138,31260464,31755108,32376262,33063370,33910148,34331923,34765571,35276938,35645456,36004392,36523414,39051505,39829392,40444318,41054490,41856179,43244288,43965527,44673417,45416923,45954475,46621595,47540221,48040556,48402277,48753254,49050390,49382755,49893536,50532296,50851254,51027312,51210064,51377468,51564804,51759854,51957751,52235563,52585016,52965324,53348413,53590025,53792148,53971665,54151897,54324262,54490330,54654093,54855982,55107277,55370243,55672949,55971203,56263195,56531437,56821596,57176048,57674962,58325003,59028585};
		cM[20] = new int [] {0,292926,473572,657014,857705,1058561,1485403,1868544,2228613,2612327,3093221,3868950,4301024,4631253,4912279,5165835,5363969,5542615,5710026,5928997,6198774,6777277,7140542,7476497,7866823,8329857,8742429,9220478,9589642,9861232,10096856,10404513,10949573,11309086,11897415,12542449,13007458,14115933,15121236,15426859,15745120,16122887,16747146,17460421,17981314,18516299,19247229,19550347,19869399,20214152,20750637,22476444,23401586,24546569,31395376,33203720,35923804,36575029,37231268,38639140,39253077,40500258,41089920,41679793,42370533,42823326,43212974,43815483,44935675,45411077,45764825,46150188,46547031,46802928,47292852,48283371,49056840,49581434,49984981,50429686,51302501,51761875,52151300,52509760,52817727,53159660,53754424,54423889,54834063,55101528,55393237,55693956,56086811,56421058,56639238,56926138,57231209,57602511,58028697,58339147,58593321,58827173,59026508,59224997,59415032,59584269,59781064,59992603,60180246,60387571,60652459,60941554,61291092,61685923,62215157};
		cM[21] = new int [] {0,15017120,15289230,15573653,15880487,16207072,16555253,16928766,17438020,18005187,18485950,18803323,19130800,19450826,19783453,20168667,20725543,21353548,21813721,22232616,22694068,23269418,24452040,24974344,25467241,25973042,27306700,27809441,28155670,28466224,28850268,29345477,30529801,32011080,32753030,33329510,33815124,34315884,34962746,35596002,36097297,36516609,36943494,37343254,37692924,38116721,38855111,39475249,39928171,40369657,40910101,41298314,41556414,41815151,42128875,42451917,42689189,42879403,43058575,43228464,43421244,43718533,44100986,44682777,45302237,45839986,46401312,46888364,47339222,47763294};
		cM[22] = new int [] {0,17230886,17378089,17529780,17688402,17854613,18029673,18212895,18384517,18597145,18924126,19287025,19772690,20273355,20777656,21301888,21787200,22312185,22724244,23082496,23425013,23800260,24208170,24773248,25274533,25707786,26049534,26354531,26616798,26916438,27161035,27373075,27575745,27760974,27965634,28221691,28752505,30471488,31921646,32728170,33293516,34047210,34841505,35649051,36007393,36628801,36906275,37117819,37294383,37457870,37696902,38467350,39408307,40296265,43225022,44102225,44388337,44602972,44803086,45003255,45219212,45479372,45816269,46284559,47031166,47674260,48008505,48229112,48412197,48572724,48725736,48846648,48991997,49134912,49294065,49456722,49626712,49839539,50076448,50414983,51155059};	
		
		
	}

	public static void main(String[] args) throws IOException {
		HBA_Server_V2 server = new HBA_Server_V2(/*args[0]*/);
		server.run();
	}

	//Executioner Method
	public void run() throws IOException {
		// try block to create connection
		try {
			server = new ServerSocket(port);
			System.out.println("Server started");
			System.out.println("Waiting for a client ...");
			socket = server.accept();
			System.out.println("Connection established with Client ");
			System.out.println("Just connected to " + socket.getRemoteSocketAddress());
		} catch (IOException i) {
			System.out.println("Execption at Server : "+i);
		}

		// block to create input, output objects
		try {
			// takes input from the client socket
			serverIn = new DataInputStream(new BufferedInputStream(socket.getInputStream()));
			// sends output to the socket
			serverOut = new DataOutputStream(socket.getOutputStream());
		} catch (IOException i) {
			System.out.println(i);
		}
		
		//Method Call to Initiate Nonce
		initiateNonce();
		
		System.out.println("Server : initiateNonce()");
		
		//Method Call to Input the Data File
		inputFile(location);
		System.out.println("Server : inputFile(location); ");
		
		//Sending Name of the file
		try {
			serverOut.writeUTF(location);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println("Server : Sending Name of the file");
		
		//Method Call to Find Common SNPs between users
		findSnips();
		
		System.out.println("Server : findSnips()");
		
		//Method call to display Read Input File Properties
		//displayInputFileProperties();
		
		//Method Call To Create Frames
		setFrames();
		
		System.out.println("Server : setFrames();");
		
		//Method call to display Exlusion List
		//displayExclusionList();
		
		//Method Call to receive and send Hashcodes
		List<String> hash = new ArrayList<>();
		hash=hashCodes();
		
		System.out.println("Server : hash=hashCodes()");
		
		//matching
		matchFrames(hash);
		
		System.out.println("Server : matchFrames(hash)");
		//nonMatches();
		//matchStats();
		
		/*
		 * for (int j=0;j<frames[17].size();j++) { FrameData obj = frames[17].get(j);
		 * obj.display(obj, 17); }
		 */
		
		//Sending & receiving last comms
		//serverOut.writeUTF("close");
		//serverIn.readUTF();
		System.out.println("Server : Sending & receiving last comms");
		
		// block to close connections
		try {
			socket.close();
			server.close();
			serverIn.close();
			serverOut.close();
			System.out.println("\tConnection closed !!!");
		} catch (IOException i) {
			System.out.println(i);
		}
	}

	public void removeDupLocs() {
		for (int i = 1; i <= CHROMOSOME_COUNT; i++)
			for (int j = 0; j < genes[i].size() - 1; j++) {
				GenotypedData obj = genes[i].get(j);
				GenotypedData ob = genes[i].get(j + 1);
				if (obj.getLocation() == ob.getLocation())
					genes[i].remove(j + 1);
			}
	}

	//Method to find common SNIPS
	public void removeLocations(int chromosome, String locs, String rsids) {
		int i=0,j=0;
		//Splitting the string of locations into Array of Locations
		String[] temp = locs.split(" ");
		String[] temp1 = rsids.split(" ");
		//Transforming array of locations to into a list of location
		List<Integer> pLocs = new ArrayList<>();
		List<String> pRsids = new ArrayList<>();
		for( i = 0; i < temp.length && i<temp1.length; i++) {
			pLocs.add ( Integer.parseInt(temp[i]));
			pRsids.add(temp1[i]);
		}
		//System.out.println("Initial  size	: "+ genes[chromosome].size());
		//System.out.println("Received size	: "+ pLocs.size() + "   " + pRsids.size());
		i=0;
		
		//Iterating through party's location list and current user's location list to find common locations
		//and removing unwanted locations
		while(i<pLocs.size() && j< genes[chromosome].size() && i < pRsids.size()) {
			GenotypedData obj = (GenotypedData) genes[chromosome].get(j);
			int partyLoc = pLocs.get(i);
			String partyRsid = pRsids.get(i); 
			
			if (partyRsid.contentEquals(obj.getRSID())) {
				if (partyLoc == obj.getLocation()) {
					i++;
					j++;
				}
				else if (partyLoc != obj.getLocation()) {
					obj.location=partyLoc;
					i++;
					j++;
				}
			}
			
			
			if (! partyRsid.contentEquals(obj.getRSID())) {
				if (partyLoc < obj.getLocation()) {
					pLocs.remove(i);
					pRsids.remove(i);
				}
				else if (partyLoc > obj.getLocation())
					genes[chromosome].remove(j);
				else if (partyLoc == obj.getLocation()) {
					genes[chromosome].remove(j);
					pLocs.remove(i);
					pRsids.remove(i);
				}
			}
			
			
		}
		//resizing the data structures
		if (pLocs.size() > genes[chromosome].size() && pRsids.size() > genes[chromosome].size()) {
			pLocs.subList(genes[chromosome].size(), pLocs.size()).clear(); 
			pRsids.subList(genes[chromosome].size(), pRsids.size()).clear(); 
		}
		else if (genes[chromosome].size() > pLocs.size() && genes[chromosome].size() > pRsids.size()) 
			genes[chromosome].subList(pRsids.size(),genes[chromosome].size()).clear();
		
		
		//looking for mismatches if any 
		int mismatches=0;
		for (i=0;i<pRsids.size() && i <pLocs.size();i++) {
			GenotypedData cur = (GenotypedData) genes[chromosome].get(i);
			if (cur.location != pLocs.get(i) && cur.rsid.contentEquals(pRsids.get(i))) {
				mismatches++;
			}
		}
		//System.out.println("Final    size	: " + genes[chromosome].size());
		//System.out.println("Mismatches in Chromosome  "+ chromosome+ " are "+mismatches);	
	}
	
	// Verify if the alleles are Homozygous and in "A,C,G,T" for
	public boolean isPermissible(char a, char b) {
		if (a != b)
			return false;
		else {
			char[] permissible = { 'A', 'C', 'G', 'T' };
			for (int i = 0; i < permissible.length; i++) {
				if (a == permissible[i] && b == permissible[i]) 
					return true;
			}
		}
		return false;
	}

	public void csvParser(String location) throws IOException{		
		String s="";
		FileReader fr = new FileReader(location);
		BufferedReader bf = new BufferedReader(fr);
		int flag =0;
		while ( (s= bf.readLine()) != null) {
			
			if (flag==0 && s.length() > 3 && s.substring(0, 2).contentEquals("rs"))
				flag =1;
			
			if (flag ==1) {
	        	GenotypedData obj =new GenotypedData();
	        	int index = 0;
	            int len = s.length();
	            for(; (index  < len) && (s.charAt(index) != '\t'); index++) {}
	            obj.rsid= s.substring(0, index);
	            index++;
	            char c;
	            c = s.charAt(index);
	            int chromosome = c & 0xF;
	            index++;
	            c = s.charAt(index);
	            if(c != '\t') {
	            	chromosome = (chromosome << 3) + (chromosome << 1) + (c & 0xF);
	                index++;
	            }
	            if((chromosome > CHROMOSOME_COUNT) || (chromosome <=0)) {
	            	bf.close();
	            	return;
	            }
	            index++;           
	            int loc = 0;
	            for(;index  < len; index++) {
	                c = s.charAt(index);
	                if(c != '\t') {
	                	loc = (loc << 3) + (loc << 1) + (c & 0xF);
	                } else {
	                    break;
	                }
	            }
	            obj.location=loc;
	            //index++;
	            obj.gene1=s.charAt(len-2);
	            obj.gene2=s.charAt(len-1);
	            
	            if (isPermissible(obj.gene1,obj.gene2) ) {
	            	ArrayList <GenotypedData> gen =  genes[chromosome];
	            	gen.add(obj);
	            }
	            else {
	            	ArrayList <GenotypedData> gen =  readRejects[chromosome];
	            	gen.add(obj);
	            }	
			}
        }
		bf.close();
		IntStream.range(1,CHROMOSOME_COUNT).parallel().forEach(x -> Collections.sort(genes[x]));
	}

	// Method to generate a Random number
	public long generateRandom() throws NoSuchAlgorithmException, NoSuchProviderException {

		SecureRandom secureRandomNumber = SecureRandom.getInstance("SHA1PRNG", "SUN");
		byte[] randomBytes = new byte[128];
		secureRandomNumber.nextBytes(randomBytes);
		return my_nonce = secureRandomNumber.nextLong();

		// my_nonce
		// =ThreadLocalRandom.current().nextLong(-9223372036854775807L,9223372036854775807L)
	}

	// Method to send Hash of random number to the other party
	public String sendHash() throws NoSuchAlgorithmException, NoSuchProviderException {
		return (hashOfMyNonce = getSHA(String.valueOf(generateRandom())));
	}

	// Method to send Random number to the other party
	public long sendRandom() {
		return my_nonce;
	}

	// Method to verify if Hash of Random matches with the random number sent by
	// other party
	public boolean verifyHashNonce() {
		return hashOfPartyNonce.contentEquals(getSHA(String.valueOf(party_nonce)));
	}

	// Display the NONCE fields
	public void displayNonce() {
		System.out.println("\n My Data		: " + my_nonce + " :: " + hashOfMyNonce);
		System.out.println("\n Party Data		: " + party_nonce + " :: " + hashOfPartyNonce);
		System.out.println("\n Nonce			: " + nonce);
	}

	// Method to Calculate the Ultimate NONCE
	public void caluclateNonce() {
		nonce = my_nonce ^ party_nonce;
		// System.out.println("\n Nonce : " +nonce);
	}

	// Method to generate Hash with nonce
	public String getSHAWitnNonce(String input, long nonce1) {
		try {
			// Static getInstance method is called with hashing SHA
			MessageDigest md = MessageDigest.getInstance("SHA-256");
			// update the digest with nonce
			md.update(String.valueOf(nonce1).getBytes());
			// digest() method called
			// to calculate message digest of an input
			// and return array of byte
			byte[] messageDigest = md.digest(input.getBytes());
			// Convert byte array into sign-magnitude representation
			BigInteger no = new BigInteger(1, messageDigest);
			// Convert message digest into hex value
			String hashtext = no.toString(16);
			while (hashtext.length() < 32) {
				hashtext = "0" + hashtext;
			}
			return hashtext;
		}
		// For specifying wrong message digest algorithms
		catch (NoSuchAlgorithmException e) {
			System.out.println("Exception thrown" + " for incorrect algorithm: " + e);
			return null;
		}
	}

	// Method to generate Hash w/o nonce
	public String getSHA(String input) {
		try {
			// Static getInstance method is called with hashing SHA
			MessageDigest md = MessageDigest.getInstance("SHA-256");
			// digest() method called
			// to calculate message digest of an input
			// and return array of byte
			byte[] messageDigest = md.digest(input.getBytes());
			// Convert byte array into sign-magnitude representation
			BigInteger no = new BigInteger(1, messageDigest);
			// Convert message digest into hex value
			String hashtext = no.toString(16);
			while (hashtext.length() < 32) {
				hashtext = "0" + hashtext;
			}
			return hashtext;
		}
		// For specifying wrong message digest algorithms
		catch (NoSuchAlgorithmException e) {
			System.out.println("Exception thrown for incorrect algorithm: " + e);
			return null;
		}
	}
	
	
	
	
	public void frameWithcM(int offset) {
		try { 
			//iterating the outer array for each 22 chromosomes
			for (int i =1 ; i<=CHROMOSOME_COUNT; i++) {
				StringBuilder evenSubstring= new StringBuilder("");
				StringBuilder oddSubstring= new StringBuilder("");
				int start=0;
				int end =0;
				String startRsid="";
				String endRsid="";
				int even=0;
				int odd=0;
				int cMIndex=0+offset;
				int cmStart=0;
				//iterating through the data of each chromosomes
				for(int j=0; j<genes[i].size(); j++) {	
					//fetching first location in the centiMorgan
					GenotypedData o= genes[i].get(j);
					int loc = o.getLocation();
					int counter=0;
					while(loc <= cM[i][cMIndex] && j<genes[i].size()) {
						GenotypedData x= genes[i].get(j++);
						loc = x.getLocation();
					}
					if (cM[i].length > (cMIndex+5)) {
						while (loc > cM[i][cMIndex] && loc < cM[i][cMIndex+5] && j<genes[i].size()) {
							GenotypedData obj= genes[i].get(j);
							int loc1 = obj.getLocation();
							counter++;
							//capture the start of the frame and empty the genotype string
							if (counter==1 ) {
								start=obj.getLocation();
								startRsid=obj.getRSID();
								oddSubstring.delete(0, oddSubstring.length());
								evenSubstring.delete(0, evenSubstring.length());
								even=0;
								odd=0;
								cmStart=cMIndex;
							}	
							if(counter%2==0) {
								evenSubstring.append(String.valueOf(obj.gene1));
								evenSubstring.append(String.valueOf(obj.gene2));
								even++;
							}
							else {
								oddSubstring.append(String.valueOf(obj.gene1));
								oddSubstring.append(String.valueOf(obj.gene2));
								odd++;
							}
							
							loc=loc1;
							j++;
						}
					}
				//System.out.println("For Chromosome "+i+ " Number of alleles between cM "+cMIndex+" and "+ (cMIndex+5) + " is : " +counter);	
				//capture the end of Frame
				//check if the length of even and odd substring are greater than the threshold or not
				if (even >= threshold && odd >= threshold && counter >1) {
					GenotypedData obj= genes[i].get(j-1);
					ArrayList <FrameData> gen =  frames[i];
					end=obj.location;
					endRsid=obj.getRSID();
					FrameData fr=new FrameData(start,startRsid,end,endRsid,getSHAWitnNonce(evenSubstring.toString(),nonce),getSHAWitnNonce(oddSubstring.toString(),nonce),cmStart,(cmStart+5),even,odd);
					gen.add(fr);
					start=0;
					oddSubstring.delete(0, oddSubstring.length());
					evenSubstring.delete(0, evenSubstring.length());
					even=odd=0;
				}
				else {
					if (counter >1) {
						ArrayList <FrameData> gen =  exclusionList[i];
						GenotypedData obj= genes[i].get(j-1);
						end=obj.location;
						endRsid=obj.getRSID();
						FrameData fr=new FrameData(start,startRsid,end,endRsid,getSHAWitnNonce(evenSubstring.toString(),nonce),getSHAWitnNonce(oddSubstring.toString(),nonce),cmStart,(cmStart+5),even,odd);
						gen.add(fr);
						start=0;
						oddSubstring.delete(0, oddSubstring.length());
						evenSubstring.delete(0, evenSubstring.length());
						even=odd=0;
					}
				}
				cMIndex+=5;
				if (cM[i].length < (cMIndex+5))
					break;
				}
			}
		}catch(Exception e) {
			System.out.println("Exception occured: "+e);
			e.printStackTrace();
		}
	}
	
	
	public void setFrames() {
		try {
			for (int i =0; i<overlap; i++) {	
				frameWithcM(i);
		    }
		} catch(Exception e) {
			System.out.println("Exception occured: "+e);
			e.printStackTrace();
		}
		
		IntStream.range(1,CHROMOSOME_COUNT).parallel().forEach(x -> Collections.sort(frames[x]));
	}

	public boolean allSent() {
		System.out.println();
		for (int i=1;i<=CHROMOSOME_COUNT;i++)
			for (int j=0;j<frames[i].size();j++) {
				FrameData obj= frames[i].get(j);
				if (!obj.sent)
					return false;
			}
		return true;
	}
	
	public void matchFrames(List<String> hashes) {	
		int matches=0;
		for (String str : hashes) {
			String []temp=str.split(" ");
			for (int i=1;i<=CHROMOSOME_COUNT;i++)
				for (int j=0;j<frames[i].size();j++) {
					FrameData obj = frames[i].get(j);
						if (obj.evenHashValue.equals(temp[0]) || 
								obj.oddHashValue.equals(temp[1])) {
							obj.match=true;
							matches++;
							break;
						}
				}
		}
		//System.out.println("Matches : "+(matches));
		//System.out.println("Client hashes size"+hashes.size());
	}
	
	public void matchStats() {
		System.out.println("\n\nMatch Stats \n");
		int overall=0,totMatch=0, totalCM=0, oevrallCM=0;
		for (int i=1;i<=CHROMOSOME_COUNT;i++) {
			int match=0;
			int cmCount=0;
			int start=0;
			int end=0;
			int cMNow=0;
			for (int j=0;j<frames[i].size();j++) {
				FrameData obj = frames[i].get(j);
				if (obj.match) 
					match++;
				if (obj.match && start==0 && end==0) {
					//System.out.println("Init");
					if (cmCount > obj.cmStart) 
						start=cmCount;
					else
						start=obj.cmStart;
					end=obj.cmEnd;
				}
				
				if (obj.match && start >=0 && end > 0)
					end = obj.cmEnd;
				if (!obj.match && obj.cmEnd > 0) {
					cmCount += end-start;
					start=0;
					end=0;
				}
				if (frames[i].size() > 0 && start >=0 && end >0) {
					if (j==frames[i].size()-1) {
						cmCount += end-start;
					}
				}
				
			}
			overall+=frames[i].size();
			totMatch+=match;
			totalCM+=cmCount;
			if (frames[i].size() > 0) {
				cMNow = (frames[i].get(frames[i].size()-1).cmEnd);
				oevrallCM+=cMNow;
			}
			System.out.println("At Chromosome "+i);
			System.out.println("\t\t\tTotal    Frames are	"+ frames[i].size());
			System.out.println("\t\t\tMatching Frames are	"+ match);
			System.out.println("\t\t\tTotal    CMs    are	"+ cMNow);
			System.out.println("\t\t\tMatching CentiMorgans	"+ cmCount);
		}
		System.out.println("Overall Total    Frames are	"+ overall);
		System.out.println("Overall Matching Frames are	"+ totMatch);
		System.out.println("Overall Total	 CMs	are	"+ oevrallCM);
		System.out.println("Overall Matching CMs	are	"+ totalCM);
	}
	
	public void nonMatches() {
		System.out.println("\n\nDisplaying Non Matched Frames\n");
		for (int i=1;i<=CHROMOSOME_COUNT;i++)
			for (int j=0;j<frames[i].size();j++) {
				FrameData obj = frames[i].get(j);
				if (!obj.match)
					obj.display(obj, i);
			}
	}
	public void displayExclusionList() {
		System.out.println("\n\t\tExclusion List \n\n");
		int total =0;
		for (int i =1 ; i<=CHROMOSOME_COUNT; i++) {
			System.out.println(" No. of Frames excluded in Chromosome "+i+" is "+exclusionList[i].size());
			total+=exclusionList[i].size();
		}
		System.out.println("\nTotal number of Frames exluded is :"+total);
	}
	
	// Method code to create and share NONCE
	public void initiateNonce() {
		try {
			serverOut.writeUTF(sendHash());
			hashOfPartyNonce = serverIn.readUTF();

			serverOut.writeLong(sendRandom());
			party_nonce = serverIn.readLong();

			if (verifyHashNonce())
				System.out.print("Other Party Is Honest");
			else {
				System.out.print("Other Party Is Dishonest !!!\nHence Closing Connection");
				try {
					socket.close();
					serverIn.close();
					serverOut.close();
				} catch (IOException i) {
					System.out.println(i);
				}
			}
			caluclateNonce();
			displayNonce();
		} catch (NoSuchProviderException i) {
			System.out.println(i);
		} catch (IOException i) {
			System.out.println(i);
		} catch (NoSuchAlgorithmException i) {
			System.out.println(i);
		}
	}
	
	public void inputFile(String location) {
		try {
			csvParser(location);
			serverOut.writeUTF("a");
			removeDupLocs();
		} catch (IOException e) {
			e.printStackTrace();
		}	 
	}
	
	//Creates a string of all locations for each chromosome in a batch of 5000 locations
	//Sends the batch of strings one by one 
	public void findSnips() {
		try {
			StringBuilder locs = new StringBuilder("");
			StringBuilder rsids = new StringBuilder("");
			int counter = 0;
			for (int i = 1; i <= CHROMOSOME_COUNT; i++) {
				locs.delete(0, locs.length());
				for (int j = 0; j < genes[i].size(); j++) {
					GenotypedData obj = genes[i].get(j);
					locs.append(obj.getLocation());
					rsids.append(obj.getRSID());
					locs.append(" ");
					rsids.append(" ");
					counter++;
					//shares the batch of 5000 location
					if (counter == 5000) {
						//signifies the next batch will come for this chromosome
						serverOut.writeUTF("continue");
						serverOut.write(i);
						serverOut.writeUTF(locs.toString());
						serverOut.writeUTF(rsids.toString());
						locs.delete(0, locs.length());
						rsids.delete(0, rsids.length());
						counter = 0;
						serverIn.readUTF();
					}
				}
				//shares the last batch of locations 
				if (counter > 0 && counter < 5000) {
					//signifies this is the last batch for the chromosome
					serverOut.writeUTF("last");
					serverOut.write(i);
					serverOut.writeUTF(locs.toString());
					serverOut.writeUTF(rsids.toString());
					locs.delete(0, locs.length());
					rsids.delete(0, rsids.length());
					counter = 0;
					serverIn.readUTF();
					//System.out.println("Sent data for chromosome : " + i);
					//Receiving from Server
					String line="",locs1="";
					String rsids1="";
					while(!line.equals("complete")) {
						line=serverIn.readUTF();
						//receive the current batch and form a string for the complete chromosome
						if (line.contentEquals("continue")) {
							locs1+=serverIn.readUTF();
							rsids1+=serverIn.readUTF();
						}
						//receive the last batch for the chromosome
						if (line.contentEquals("last")) {
							locs1+=serverIn.readUTF();
							rsids1+=serverIn.readUTF();
							//Method call to find the common snips between users
							//System.out.println("locs1 : "+locs1);
							//System.out.println("rsids : "+rsids1);
							removeLocations(i,locs1,rsids1);
						}
						//all the batch received for the current chromosome
						if (line.contentEquals("complete")) {
		            		serverOut.writeUTF("done");
		            		//System.out.println("Received data for chromosome : " + i);
		            		break;
		            	}
					}
				}
			}
			//signifies that the sharing of snips is over
			String s = "over";
			serverOut.writeUTF(s);
			//System.out.println("String " + s + " sent");
			serverIn.readUTF();
		} catch (IOException i) {
			System.out.println(i);
		}
	}
	
	public void displayInputFileProperties() {
		for (int x=1;x<=CHROMOSOME_COUNT;x++) {
			System.out.println("Chromosome : " +x);
			int hetero=0,idn=0,hyphen=0,heh=0;
			for (int y=0;y<readRejects[x].size();y++) {
				GenotypedData xy= readRejects[x].get(y);
				if (xy.getGene1()!=xy.getGene2())
					hetero++;
				if (xy.getRSID().charAt(0)=='i' && isPermissible(xy.gene1,xy.gene2)) 
					idn++;
				if (xy.getRSID().charAt(0)=='i' && !isPermissible(xy.gene1,xy.gene2)) 
					heh++;
				if (xy.getGene1()=='-' || xy.getGene2()=='-')
					hyphen++;
			}
		System.out.println("\tHeterozygotes		: " +hetero);
		System.out.println("\tHomozygotes		: " +genes[x].size());
		System.out.println("\tGenotypes with --	: " +hyphen);
		System.out.println("\tRSID starts with i & acceptable Genotypes		: " +idn);
		System.out.println("\tRSID starts with i & unacceptable Genotypes	: " +heh);	
		}
	}
	
	
	public List<String> hashCodes() {
		//Finding Total number of Hashes
		int totalFrames=0;
		//System.out.println("\n\nSize of Frames");
		for (int m=1;m<=CHROMOSOME_COUNT;m++) {
			//System.out.println("Chromosome "+m+" :" +frames[m].size());
			totalFrames+=frames[m].size();
		}
		//System.out.println("Total Number of Frames : "+totalFrames);
		//Create a list of all hashes
		List<String> hashToBeSent = new ArrayList<>();
		List<String> hashReceived = new ArrayList<>();
		try {	
			//Sending the value of total number of hashes
			serverOut.writeInt(totalFrames);
			//Receiving total number of hashes count
			int hashSize=serverIn.readInt();
			System.out.println("Recieved Input for Hash Size : " +hashSize);
			//Generating the list of hashes that needs to be sent
			for (int i=1;i<=CHROMOSOME_COUNT;i++)
				for (int j=0;j<frames[i].size();j++) {
					FrameData obj= frames[i].get(j);
					if (!obj.sent){
						String s= obj.evenHashValue + " " + obj.oddHashValue;
						obj.sent=true;
						hashToBeSent.add(s);
					}
				}
			//Sort the hashvalue list
			Collections.sort(hashToBeSent);
			//Sending and Receiving Hashcodes
			String batch="", received="";
			int counter=0;
			for(String hashCode : hashToBeSent) {
				batch += hashCode + "||";
				counter++;
				if (counter==100) {
					//Sending batches of 100 HashCodes
					serverOut.writeUTF(batch);
					batch="";
					//Receiving batch of 100 HashCodes
					received +=serverIn.readUTF();
					counter=0;
				}
			}
			//Sending and Receiving the last batch of less than 100 hashes
			serverOut.writeUTF(batch);
			received += serverIn.readUTF();
			//transforming received hashcodes into a list of strings
			String []arr=received.split("[||]");
			for (String w:arr) 
				if (!w.contentEquals(""))
					hashReceived.add(w);
			//System.out.println("Input Size : "+hashReceived.size());			
		}catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("All Hashes Sent and Received");
		return hashReceived;
	}
	
}
